use yourDatabaseName; // Use your database
db.createCollection("CUSTOMER");

db.CUSTOMER.insertMany([
  {
    Cust_No: 1001,
    First_Name: "Amit",
    Last_Name: "Kumar",
    Address: "123 Street",
    City: "Bangalore",
    State: "KARNATAKA",
    Pincode: 560001,
    B_Date: new Date("1985-05-20"),
    Status: "Married"
  },
  {
    Cust_No: 1002,
    First_Name: "Anjali",
    Last_Name: "Sharma",
    Address: "456 Avenue",
    City: "Mumbai",
    State: "MAHARASHTRA",
    Pincode: 400001,
    B_Date: new Date("1990-10-15"),
    Status: "Unmarried"
  },
  {
    Cust_No: 1003,
    First_Name: "Rahul",
    Last_Name: "Desai",
    Address: "789 Boulevard",
    City: "Pune",
    State: "MAHARASHTRA",
    Pincode: 576201,
    B_Date: new Date("1988-08-12"),
    Status: "Divorcee"
  },
  {
    Cust_No: 1004,
    First_Name: "Priya",
    Last_Name: "Reddy",
    Address: "101 Street",
    City: "Mangalore",
    State: "KARNATAKA",
    Pincode: 575001,
    B_Date: new Date("1992-01-25"),
    Status: "Married"
  }
]);

#1. Display all the documents where state is KARNATAKA
db.CUSTOMER.find({ State: "KARNATAKA" });

#2. Delete the document where PIN CODE is 576201
db.CUSTOMER.deleteOne({ Pincode: 576201 });

#3. Update the Address and Pincode where CUST_NO is 1003
db.CUSTOMER.updateOne(
  { Cust_No: 1003 },
  {
    $set: {
      Address: "PICT, Trimurti Chowk, Dhankawadi",
      Pincode: 411041
    }
  }
);

#4. Display the total number of Married, Unmarried, and Divorcee customers
db.CUSTOMER.aggregate([
  { $group: { _id: "$Status", count: { $sum: 1 } } }
]);

#5. Sort and display the customer data in alphabetical order of city
db.CUSTOMER.find().sort({ City: 1 });

#6. Retrieve records of Karnataka or Kerala customers who are Married ('M')
db.CUSTOMER.find({
  State: { $in: ["KARNATAKA", "KERALA"] },
  Status: "Married"
});

Step 3: Index Operations
Create Index on City Field
db.CUSTOMER.createIndex({ City: 1 });

Get Index Information
db.CUSTOMER.getIndexes();

Drop Index on City Field
db.CUSTOMER.dropIndex("City_1");

Step 4: Aggregation Function to Calculate Total Customers per City

Using Aggregation
db.CUSTOMER.aggregate([
  { $group: { _id: "$City", totalCustomers: { $sum: 1 } } }
]);

#Using MapReduce
db.CUSTOMER.mapReduce(
  function() { emit(this.City, 1); },
  function(key, values) { return Array.sum(values); },
  {
    out: "customer_count_per_city"
  }
);

To view the results:
db.customer_count_per_city.find();

