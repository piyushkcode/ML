# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load the dataset
df = pd.read_csv('Social_Network_Ads.csv')

# Display the first few rows of the dataset to understand its structure
print(df.head())

# Step 1: Data Pre-processing

# Drop columns that are not needed for clustering
df = df.drop(['User ID'], axis=1)

# Label encoding for categorical columns (if necessary)
# Encoding the 'Gender' column
label_encoder = LabelEncoder()
df['Gender'] = label_encoder.fit_transform(df['Gender'])

# Step 2: Selecting Features for Clustering
# Since the task specifies to base clustering on the 'EstimatedSalary' column, we'll focus on it and optionally 'Age'
X = df[['EstimatedSalary', 'Age']]

# Standardizing the data (important for K-Means)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 3: Finding the Optimal Number of Clusters using the Elbow Method

inertia = []
cluster_range = range(1, 11)
for k in cluster_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plotting the Elbow Curve
plt.figure(figsize=(8, 5))
plt.plot(cluster_range, inertia, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method to Find Optimal Clusters')
plt.show()

# Step 4: Apply K-Means Clustering with Optimal Number of Clusters
# Let's assume the elbow point suggests 3 clusters
optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Step 5: Analyze the Clusters
# Checking the first few rows with cluster labels
print(df.head())

# Visualize the Clusters (2D plot for Age vs. EstimatedSalary)
plt.figure(figsize=(10, 6))
for i in range(optimal_clusters):
    cluster_data = df[df['Cluster'] == i]
    plt.scatter(cluster_data['Age'], cluster_data['EstimatedSalary'], label=f'Cluster {i}')
    
plt.xlabel('Age')
plt.ylabel('EstimatedSalary')
plt.title('K-Means Clustering of Users based on EstimatedSalary and Age')
plt.legend()
plt.show()
