# Import necessary libraries
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv(r'E:\ML Dataset\LP-1 Dataset\Apriori\Order2.csv',header=None)
df.head()


df = df.map(str)


print(df.columns)
print(df.dtypes)

# Step 2: Generate the List of Transactions
# -----------------------------------------
# Convert the dataset to a list of transactions (list of lists of items)
transactions = df.values.tolist()

# Display the first few transactions to check
print("\nFirst few transactions:")
print(transactions[:5])


# Step 3: Prepare the Transaction Data for Apriori
# -----------------------------------------------
# Use TransactionEncoder to convert the transactions into a one-hot encoded format
te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)

# Convert the result into a DataFrame
transaction_df = pd.DataFrame(te_ary, columns=te.columns_)

# Display the one-hot encoded transaction data
print("\nOne-Hot Encoded Transaction DataFrame:")
print(transaction_df.head())

# Step 4: Apply the Apriori Algorithm
# -----------------------------------
# Apply the Apriori algorithm to find frequent itemsets
# Choose a minimum support threshold (e.g., min_support=0.005 for 0.5% frequency)
frequent_itemsets = apriori(transaction_df, min_support=0.005, use_colnames=True)

# Display the frequent itemsets found by the Apriori algorithm
print("\nFrequent Itemsets:")
print(frequent_itemsets)



# Step 5: Generate Association Rules
# -----------------------------------
# If frequent itemsets are found, generate association rules
if not frequent_itemsets.empty:
    # Set a minimum confidence threshold for rule generation (e.g., min_confidence=0.3 for 30%)
    rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.3,num_itemsets=10)
    
    # Display the generated rules with relevant metrics
    print("\nAssociation Rules:")
    print(rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])
else:
    print("No frequent itemsets found. Try reducing min_support to obtain more itemsets.")


# Step 6: Visualize the Association Rules
# ---------------------------------------
# Check if rules DataFrame is not empty before visualizing
if not frequent_itemsets.empty:
    # Scatter plot to visualize Support vs Confidence with Lift as color and size
    plt.figure(figsize=(10, 6))
    sns.scatterplot(x='support', y='confidence', size='lift', hue='lift', data=rules, palette='viridis', sizes=(20, 200))
    plt.title('Support vs Confidence with Lift as Size')
    plt.xlabel('Support')
    plt.ylabel('Confidence')
    plt.legend(loc='best')
    plt.show()
else:
    print("No rules to visualize.")
